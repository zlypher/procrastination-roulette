import {
  Box,
  Button,
  Container,
  Flex,
  Grid,
  Heading,
  Input,
  Select,
  Stack,
  Text,
} from "@chakra-ui/react";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRef } from "react";
import { useState } from "react";

interface ITaskProps {
  task: TTask;
}

const Task = ({ task }: ITaskProps) => {
  return (
    <Flex
      borderRadius="sm"
      boxShadow="lg"
      border="1px"
      p="2"
      alignItems="center"
    >
      <Text
        flexGrow={1}
        whiteSpace="nowrap"
        overflow="hidden"
        textOverflow="ellipsis"
        mr="4"
      >
        {task.name}
      </Text>
    </Flex>
  );
};

type TTask = {
  name: string;
  prio: number;
};

const Home: NextPage = () => {
  const nameRef = useRef<HTMLInputElement>();
  const prioRef = useRef<HTMLSelectElement>();
  const [tasks, setTasks] = useState<TTask[]>([]);
  const [result, setResult] = useState<TTask | null>(null);

  const addTask = () => {
    if (nameRef.current == null || prioRef.current == null) {
      return;
    }

    const t: TTask = {
      name: nameRef.current.value,
      prio: parseInt(prioRef.current.value ?? 0, 10),
    };

    setResult(null);
    setTasks((prevTasks: TTask[]) => {
      return [...prevTasks, t];
    });

    nameRef.current.value = "";
    prioRef.current.value = "";
  };

  const spinWheel = () => {
    const pickResult = (arr: TTask[], val: number): TTask | null => {
      let clonedArr = [...arr];
      let prio = val;

      while (clonedArr.length > 0) {
        let t = clonedArr.shift();
        if (prio < t!.prio) {
          return t!;
        }

        prio -= t!.prio;
      }

      return null;
    };

    const totalSum = tasks.reduce((prev, curr) => prev + curr.prio, 0);
    const rnd = Math.random() * totalSum; // TODO: maybe use better rng;

    const res = pickResult(tasks, rnd);
    setResult(res);
  };

  return (
    <div>
      <Head>
        <title>Procrastination Roulette</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box as="main" py="4">
        <Container>
          <Stack mb="4">
            <Flex direction={["column", "row"]} gap="2">
              <Input ref={nameRef as any} placeholder="I should do..." />
              <Select ref={prioRef as any} w={["100%", "70%"]}>
                <option value={1}>Very Unimportant</option>
                <option value={2}>Unimportant</option>
                <option value={3}>Indifferent</option>
                <option value={4}>Important</option>
                <option value={5}>Very Important</option>
              </Select>
            </Flex>
            <Button w="100%" colorScheme="blue" onClick={addTask}>
              Add Task
            </Button>
          </Stack>
          <Grid gap={2} templateColumns="1fr 1fr" mb="4">
            {tasks.map((t, idx) => (
              <Task task={t} key={idx} />
            ))}
          </Grid>
          <Button
            d="block"
            w="100%"
            colorScheme="blue"
            onClick={spinWheel}
            disabled={tasks.length < 2}
          >
            Spin
          </Button>
        </Container>
      </Box>
    </div>
  );
};

export default Home;
